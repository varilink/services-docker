# ------------------------------------------------------------------------------
# envs/to-be/playbooks/create.yml
# ------------------------------------------------------------------------------

# Ansible playbook to deploy services to the containers that comprise the
# "to-be" environment.

---

# ---
# DNS
# ---

# We setup this service first so that any custom, required DNS lookups are
# available during the installation of subsequent services.

- hosts: dns

  # DNS resolution providers.

  tasks:

    - ansible.builtin.import_role:
        name: my_dns
      tags: [backup, calendar, dns, dynamic_dns, mail, web]

- hosts: all

  # The client resolve settings for every host.

  tasks:

    - ansible.builtin.import_role:
        name: my_dns_client
      tags: [backup, calendar, dns, dynamic_dns, mail, web]

# ------
# Backup
# ------

- hosts: hub

  # The backup service provider, which in this environment is a single host.

  tasks:

    - block:

        # Install database service to host the bacula database.
        - ansible.builtin.import_role:
            name: my_database

        # Create the bacula database and the user account to access it.
        - ansible.builtin.import_role:
            name: my_backup_director
            tasks_from: database

        # Install and configure the backup director, which will also start the
        # service.
        - ansible.builtin.import_role:
            name: my_backup_director

        # Install the backup storage service.
        - ansible.builtin.import_role:
            name: my_backup_storage

        - block:

            - ansible.builtin.include_role:
                name: my_backup_director
                tasks_from: dropbox.yml

            - ansible.builtin.include_role:
                name: my_backup_storage
                tasks_from: dropbox.yml

          when: >-
            backup_linked_to_dropbox is defined and backup_linked_to_dropbox

      tags: [backup]

- hosts: all:!backup_exceptions

  tasks:

    - ansible.builtin.import_role:
        name: my_backup_client
      tags: backup

# --------
# Calendar
# --------

- hosts: hub

  tasks:

    - ansible.builtin.import_role:
        name: my_calendar
      tags: calendar

# -----------
# Dynamic DNS
# -----------

- hosts: gateway

  tasks:

    - ansible.builtin.import_role:
        name: my_dynamic_dns
      tags: dynamic_dns

# ----
# Mail
# ----

- hosts: gateway

  tasks:

    - ansible.builtin.import_role:
        name: my_mail_certificates
      tags: mail

- hosts: hub

  tasks:

    - ansible.builtin.import_role:
        name: my_mail_internal
      tags: [backup, mail]

- hosts: prod1

  tasks:

    - ansible.builtin.import_role:
        name: my_mail_external
      tags: mail

# ---
# Web
# ---

# We deploy the web service to three hosts:
# dev1 - development (doesn't use HTTPS as it's only accessible internally).
# gateway - staging or test, which both face externally and so use HTTPS.
# prod2 - www, i.e. live, which obviously uses HTTPS.

- hosts: dev1,gateway,prod2

  tasks:

    - block:

        - ansible.builtin.import_role:
            name: my_database

        - ansible.builtin.import_role:
            name: my_reverse_proxy

        - ansible.builtin.import_role:
            name: my_wordpress_apache

        - ansible.builtin.import_role:
            name: my_wordpress_nginx

      tags: web
